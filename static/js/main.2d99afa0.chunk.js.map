{"version":3,"sources":["components/Tiempo.js","components/Titulo.js","components/DatTransaccion.js","components/Transacciones.js","components/Informacion.js","App.js","serviceWorker.js","index.js"],"names":["Tiempo","props","state","seconds","this","setState","interval","setInterval","tick","clearInterval","React","Component","Titulo","className","size","name","color","DatTransaccion","title","description","handleInputChange","bind","handleSubmit","e","preventDefault","onAddTodo","target","value","console","log","onSubmit","type","onChange","placeholder","Transacciones","transacciones","handleAddTodo","datosJson","JSON","stringify","localStorage","setItem","map","i","class","key","col","Informacion","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d99afa0.chunk.js","sourcesContent":["import React from 'react';\nclass Tiempo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { seconds: 0 };\n    }\n  \n    tick() {\n      this.setState(state => ({\n        seconds: state.seconds + 1\n      }));\n    }\n  \n    componentDidMount() {\n      this.interval = setInterval(() => this.tick(), 1000);\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  \n    render() {\n      return (\n        <div>\n          Tiempo en la aplicacion: {this.state.seconds}\n        </div>\n      );\n    }\n  }\n  \n\n  export default Tiempo","import React from 'react';\nimport Tiempo from './Tiempo'\nclass Titulo extends React.Component {\n    render() {\n      return (\n        <nav className=\"#424242 grey darken-3\"> \n          <div className=\"nav-wrapper\">\n          <div className=\"row\">\n\n              <div className=\"col s5\">\n                <font size=\"7\"> {this.props.name}</font>\n\n              </div>\n              <div className=\"col s5\">\n                <font size=\"4\" color=\"white\"><Tiempo /></font>\n              </div>\n\n           </div>\n          </div>\n          \n          \n        </nav>\n      );\n    }\n  }\n\n\n  export default Titulo","import React from 'react';\n\n\nclass DatTransaccion extends React.Component {\n    constructor(){\n        super();\n        this.state={\n          \n            title: '',\n            description: ''\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n\n\n    handleSubmit(e) {\n\n        e.preventDefault();\n        this.props.onAddTodo(this.state);\n        this.setState({\n          \n          title: '',\n          description: ''\n        });\n        \n       \n\n    }\n    \n    handleInputChange(e) {\n        const {value, name} = e.target;\n        console.log(value, name);\n        this.setState({\n          [name]: value\n        });\n    }\n\n\n\n\n\n\n\n\n    render(){\n        return(\n            \n\n            <div className=\"card-panel teal\">\n            <form onSubmit={this.handleSubmit}>\n              <h5>Transaccion a Realizar</h5>\n              <div>\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  className=\"autocomplete\"\n                  value={this.state.title}\n                  onChange={this.handleInputChange}\n                  placeholder=\"Transaccion\"\n                  />\n              </div>\n             \n              <div>\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  className=\"autocomplete\"\n                  value={this.state.description}\n                  onChange={this.handleInputChange}\n                  placeholder=\"Ingrese una cantidad\"\n                  />\n              </div>\n             \n              <button type=\"submit\" className=\"btn waves-effect waves-light\">\n                Save\n              </button>\n            </form>\n          </div>\n\n\n\n\n\n\n\n\n        );\n\n\n    }\n\n\n\n}\n\nexport default DatTransaccion","import React from 'react';\nimport DatTransaccion from './DatTransaccion';\nimport {transacciones} from '../cuentas.json';\n\n\nclass Transacciones extends React.Component {\n    constructor(){\n        super();\n        this.state={\n            transacciones\n        };\n        this.handleAddTodo = this.handleAddTodo.bind(this);\n\n\n    }\n\n\n    handleAddTodo(transacciones) {\n\n        //AÃ±adir a local store\n        var datosJson= JSON.stringify(this.state.transacciones);\n        localStorage.setItem('datosJson ', datosJson );\n\n        this.setState({\n            \n\n\n          transacciones: [...this.state.transacciones, transacciones]\n         \n        })\n\n        \n    } \n\n    \n    render(){\n\n\n        const transacciones = this.state.transacciones.map((transacciones, i) => {\n            return (\n                \n                    \n\n                    <div class=\"card blue-grey darken-1\" key={i}>\n                        <div class=\"card-content white-text\">\n                        <span class=\"card-title\"><h5>{transacciones.title}</h5></span>\n                        \n                        \n                        <div class=\"card-action\">\n                            {transacciones.description}\n                        </div>\n                        </div>\n                    </div>\n                    \n                \n            )\n          })\n\n\n         \n\n\n\n        return(\n\n            \n                <div className={this.props.col}>\n                    <DatTransaccion onAddTodo={this.handleAddTodo} ></DatTransaccion>\n                    <div class=\"divider\"></div>\n                    <div className=\"card orange darken-1\">\n                    <span class=\"card-title\">Lista Transacciones</span>\n                        {transacciones}\n                    </div>\n                    \n                </div>\n            \n        );\n    }\n}\n\nexport default Transacciones","import React from 'react';\n\n\nclass Informacion extends React.Component {\n    render(){\n        return(\n\n            <div className={this.props.col}>\n                <div className=\"card blue-grey darken-1\">\n                    <div className=\"card-content white-text\">\n                    <span className=\"card-title\"><h4>Informacion</h4></span>\n                    <div class=\"divider\"></div>\n                    <h5>Esta pagina es una simulacion de depositos a una cuenta <br></br>\n                       Cada vez que se hace un depositos se puede ver en pantalla<br></br>\n                       y se almacena en localstorage.\n                    </h5>\n                    \n                    </div>\n                    \n                </div>\n            </div>\n            \n\n\n            \n        );\n    }\n}\n\nexport default Informacion","import React,{Component} from 'react';\nimport Titulo from './components/Titulo';\nimport './App.css';\n\nimport Transacciones from './components/Transacciones';\nimport Informacion from './components/Informacion';\n\n\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n      <div className=\"row\">\n      <Titulo name=\"Interbanca\"/>\n\n\n      </div>\n       \n\n        <div className=\"row\">\n          <Informacion col=\"col s7\"/>\n          <Transacciones col=\"col s5\" />\n\n          \n          \n          \n          \n          \n          \n          \n          \n        </div>\n        \n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}